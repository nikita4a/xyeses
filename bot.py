import os
import sys
import asyncio
import random
import json  # –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
from datetime import datetime, timedelta
from loguru import logger
from telethon import TelegramClient
from telethon.errors import (
    FloodWaitError, SlowModeWaitError,
    ChatWriteForbiddenError, PeerIdInvalidError,
    ChannelPrivateError, UserBannedInChannelError,
    UnauthorizedError, RPCError
)
from telethon.tl.functions.messages import ForwardMessagesRequest

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.add("debug.log", format="{time} {level} {message}", level="INFO")


class SpamBotClient:
    def __init__(self, session_file):
        self.clients = []
        self.session_file = session_file
        self.state_file = "bot_state.json"  # –§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.delay_range = (1, 5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
        self.cycle_interval = (12, 14)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ü–∏–∫–ª–∞–º–∏ (–º–∏–Ω—É—Ç—ã)
        self.report_chat = "https://t.me/infoinfoinfoinfoo"  # –ß–∞—Ç –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        self.last_message_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.sent_messages_count = {}  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

        self._init_environment()
        self.session_configs = self._load_sessions()
        self._init_clients()

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.state = self._load_state()

    def _init_environment(self):
        os.makedirs('sessions', exist_ok=True)

    def _load_sessions(self):
        try:
            with open(self.session_file, 'r', encoding='utf-8') as f:
                return [self._parse_session_line(line) for line in f if line.strip()]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–π: {str(e)}")
            return []

    def _parse_session_line(self, line):
        parts = line.strip().split(',')
        if len(parts) != 4:
            logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç—Ä–æ–∫–∏: {line.strip()}")
            return None
        return {
            'session_name': parts[0].strip(),
            'api_id': int(parts[1].strip()),
            'api_hash': parts[2].strip(),
            'phone': parts[3].strip()
        }

    def _init_clients(self):
        for config in self.session_configs:
            client = TelegramClient(
                f'sessions/{config["session_name"]}',
                config['api_id'],
                config['api_hash']
            )
            client.phone = config['phone']
            self.clients.append(client)

    def _load_state(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞."""
        if os.path.exists(self.state_file):
            try:
                with open(self.state_file, 'r', encoding='utf-8') as f:
                    state = json.load(f)
                    logger.info("üìÇ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ.")
                    return state
            except Exception as e:
                logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")
        return {"clients": {}}  # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    def _save_state(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ —Ñ–∞–π–ª."""
        try:
            with open(self.state_file, 'w', encoding='utf-8') as f:
                json.dump(self.state, f, ensure_ascii=False, indent=4)
            logger.info("üíæ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {str(e)}")

    async def forward_messages(self, client):
        sent_count = 0
        try:
            dialogs = await client.get_dialogs()
            target_chats = [d for d in dialogs if d.is_group or d.is_channel]
            messages = await client.get_messages("me", limit=20)  # –ë–µ—Ä–µ–º 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ "–ò–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"

            if not messages:
                logger.warning(f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ '–ò–∑–±—Ä–∞–Ω–Ω–æ–º' –¥–ª—è {client.phone}")
                return sent_count

            tasks = []
            for chat in target_chats:  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Å–µ —á–∞—Ç—ã
                msg = random.choice(messages)  # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                tasks.append(self._send_message(client, chat, msg))

            results = await asyncio.gather(*tasks)
            sent_count = sum(results)
        except Exception as e:
            logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π {client.phone}: {str(e)}")
        return sent_count

    async def _send_message(self, client, chat, msg):
        try:
            await client(ForwardMessagesRequest(
                from_peer="me",
                id=[msg.id],
                to_peer=chat
            ))
            self.sent_messages_count[client.phone] = self.sent_messages_count.get(client.phone, 0) + 1
            self.last_message_time[client.phone] = datetime.now()
            logger.success(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –≤ {chat.name} ({client.phone})")
            await asyncio.sleep(random.uniform(*self.delay_range))
            return 1
        except (ChatWriteForbiddenError, PeerIdInvalidError, ChannelPrivateError, UserBannedInChannelError) as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {chat.name}: {str(e)}")
        except RPCError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {chat.name}: {str(e)}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –≤ {chat.name}: {str(e)}")
        return 0

    async def handle_spam_bot(self, client):
        if datetime.now() - self.last_message_time.get(client.phone, datetime.min) < timedelta(minutes=15):
            return

        logger.warning(f"üÜò {client.phone} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Å–æ–æ–±—â–µ–Ω–∏—è 10 –º–∏–Ω—É—Ç. –û–±—Ä–∞—â–∞–µ–º—Å—è –∫ @SpamBot")
        try:
            spam_bot = await client.get_entity("SpamBot")
            async with client.conversation(spam_bot) as conv:
                for _ in range(3):
                    await conv.send_message("/start")
                    response = await conv.get_response()
                    logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç @SpamBot: {response.text}")
                    await asyncio.sleep(random.uniform(2, 5))
        except FloodWaitError as e:
            logger.error(f"‚ùå FloodWait @SpamBot: –∂–¥–µ–º {e.seconds} —Å–µ–∫")
            await asyncio.sleep(e.seconds)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ @SpamBot –¥–ª—è {client.phone}: {str(e)}")

    async def send_report(self, client, sent_count, total_chats, delay_minutes):
        report_message = (
            f"üìä –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ:\n"
            f"–ê–∫–∫–∞—É–Ω—Ç: {client.phone}\n"
            f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {sent_count}\n"
            f"–í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n"
            f"–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —á–µ—Ä–µ–∑: {delay_minutes} –º–∏–Ω—É—Ç"
        )
        try:
            await client.send_message(self.report_chat, report_message)
            logger.success(f"üì® –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ {self.report_chat} ({client.phone})")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –¥–ª—è {client.phone}: {str(e)}")

    async def enforce_delays(self, client):
        """–ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è."""
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        client_state = self.state["clients"].get(client.phone, {})
        if "next_run" in client_state:
            next_run = datetime.fromisoformat(client_state["next_run"])
            now = datetime.now()
            if now < next_run:
                wait_seconds = (next_run - now).total_seconds()
                logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ {wait_seconds / 60:.1f} –º–∏–Ω—É—Ç –¥–ª—è {client.phone} –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞.")
                await asyncio.sleep(wait_seconds)

    async def start(self):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
        for client in self.clients:
            try:
                await client.connect()
                if not await client.is_user_authorized():
                    logger.error(f"‚ùå {client.phone} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ –∞–∫–∫–∞—É–Ω—Ç!")
                    continue
                logger.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: {client.phone}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ {client.phone}: {str(e)}")

        while True:
            # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            tasks = []
            for client in self.clients:
                await self.enforce_delays(client)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ü–∏–∫–ª–æ–º
                task = asyncio.create_task(self._process_client(client))
                tasks.append(task)

            # –ñ–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks)

            # –ó–∞–ø–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫
            for client in self.clients:
                delay_minutes = random.randint(*self.cycle_interval)
                next_run = datetime.now() + timedelta(minutes=delay_minutes)
                self.state["clients"][client.phone] = {"next_run": next_run.isoformat()}
            self._save_state()

            self.restart_script()

    async def _process_client(self, client):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        sent_count = await self.forward_messages(client)
        dialogs = await client.get_dialogs()
        total_chats = len(dialogs)
        await self.handle_spam_bot(client)
        delay_minutes = random.randint(*self.cycle_interval)
        await self.send_report(client, sent_count, total_chats, delay_minutes)

    def restart_script(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞...")
        os.execl(sys.executable, sys.executable, *sys.argv)


async def main():
    session_file = "sessions.txt"
    bot_client = SpamBotClient(session_file)
    await bot_client.start()

if __name__ == "__main__":
    asyncio.run(main())